{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7307199d",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-05-20T17:53:34.542521Z",
     "iopub.status.busy": "2024-05-20T17:53:34.541301Z",
     "iopub.status.idle": "2024-05-20T17:53:36.422471Z",
     "shell.execute_reply": "2024-05-20T17:53:36.421406Z"
    },
    "papermill": {
     "duration": 1.889773,
     "end_time": "2024-05-20T17:53:36.425213",
     "exception": false,
     "start_time": "2024-05-20T17:53:34.535440",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/meta-platforms-stock-price-data/META.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.linear_model import LinearRegression\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "21f9c8d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T17:53:36.434442Z",
     "iopub.status.busy": "2024-05-20T17:53:36.433960Z",
     "iopub.status.idle": "2024-05-20T17:53:36.471447Z",
     "shell.execute_reply": "2024-05-20T17:53:36.470470Z"
    },
    "papermill": {
     "duration": 0.044528,
     "end_time": "2024-05-20T17:53:36.473821",
     "exception": false,
     "start_time": "2024-05-20T17:53:36.429293",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Adj Close</th>\n",
       "      <th>Volume</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>28/10/2021</td>\n",
       "      <td>312.989990</td>\n",
       "      <td>325.519989</td>\n",
       "      <td>308.109985</td>\n",
       "      <td>316.920013</td>\n",
       "      <td>316.584106</td>\n",
       "      <td>50806800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>29/10/2021</td>\n",
       "      <td>320.190002</td>\n",
       "      <td>326.000000</td>\n",
       "      <td>319.600006</td>\n",
       "      <td>323.570007</td>\n",
       "      <td>323.227051</td>\n",
       "      <td>37059400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>01/11/2021</td>\n",
       "      <td>326.040009</td>\n",
       "      <td>333.450012</td>\n",
       "      <td>326.000000</td>\n",
       "      <td>329.980011</td>\n",
       "      <td>329.630280</td>\n",
       "      <td>31518900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>02/11/2021</td>\n",
       "      <td>331.380005</td>\n",
       "      <td>334.790009</td>\n",
       "      <td>323.799988</td>\n",
       "      <td>328.079987</td>\n",
       "      <td>327.732269</td>\n",
       "      <td>28353000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>03/11/2021</td>\n",
       "      <td>327.489990</td>\n",
       "      <td>332.149994</td>\n",
       "      <td>323.200012</td>\n",
       "      <td>331.619995</td>\n",
       "      <td>331.268524</td>\n",
       "      <td>20786500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date        Open        High         Low       Close   Adj Close  \\\n",
       "0  28/10/2021  312.989990  325.519989  308.109985  316.920013  316.584106   \n",
       "1  29/10/2021  320.190002  326.000000  319.600006  323.570007  323.227051   \n",
       "2  01/11/2021  326.040009  333.450012  326.000000  329.980011  329.630280   \n",
       "3  02/11/2021  331.380005  334.790009  323.799988  328.079987  327.732269   \n",
       "4  03/11/2021  327.489990  332.149994  323.200012  331.619995  331.268524   \n",
       "\n",
       "     Volume  \n",
       "0  50806800  \n",
       "1  37059400  \n",
       "2  31518900  \n",
       "3  28353000  \n",
       "4  20786500  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data=pd.read_csv(\"/kaggle/input/meta-platforms-stock-price-data/META.csv\")\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7f26f3d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T17:53:36.483125Z",
     "iopub.status.busy": "2024-05-20T17:53:36.482411Z",
     "iopub.status.idle": "2024-05-20T17:53:40.879270Z",
     "shell.execute_reply": "2024-05-20T17:53:40.878231Z"
    },
    "papermill": {
     "duration": 4.404289,
     "end_time": "2024-05-20T17:53:40.881950",
     "exception": false,
     "start_time": "2024-05-20T17:53:36.477661",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7ba7279ce080>]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "#plt.plot(data[\"Date\"],data[\"High\"])\n",
    "plt.plot(data[\"Date\"],data[\"Low\"])\n",
    "#plt.legend([\"High\",\"Low\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ad18a3ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T17:53:40.892815Z",
     "iopub.status.busy": "2024-05-20T17:53:40.892389Z",
     "iopub.status.idle": "2024-05-20T17:53:40.899427Z",
     "shell.execute_reply": "2024-05-20T17:53:40.898498Z"
    },
    "papermill": {
     "duration": 0.015149,
     "end_time": "2024-05-20T17:53:40.901724",
     "exception": false,
     "start_time": "2024-05-20T17:53:40.886575",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Date', 'Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume'], dtype='object')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "aaef4833",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T17:53:40.912501Z",
     "iopub.status.busy": "2024-05-20T17:53:40.912137Z",
     "iopub.status.idle": "2024-05-20T17:53:40.919105Z",
     "shell.execute_reply": "2024-05-20T17:53:40.917969Z"
    },
    "papermill": {
     "duration": 0.014723,
     "end_time": "2024-05-20T17:53:40.921196",
     "exception": false,
     "start_time": "2024-05-20T17:53:40.906473",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False False False False False\n"
     ]
    }
   ],
   "source": [
    "print(data[\"Open\"].hasnans,\n",
    "data[\"High\"].hasnans,\n",
    "data[\"Low\"].hasnans,\n",
    "data[\"Close\"].hasnans,\n",
    "data[\"Volume\"].hasnans)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd802c15",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T17:53:40.932206Z",
     "iopub.status.busy": "2024-05-20T17:53:40.931335Z",
     "iopub.status.idle": "2024-05-20T17:53:40.941132Z",
     "shell.execute_reply": "2024-05-20T17:53:40.940066Z"
    },
    "papermill": {
     "duration": 0.017373,
     "end_time": "2024-05-20T17:53:40.943169",
     "exception": false,
     "start_time": "2024-05-20T17:53:40.925796",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\"\"\"features=['Open', 'High', 'Low', 'Close', 'Volume']\n",
    "X=data[features]\n",
    "y=data['Adj Close']\n",
    "X,y\"\"\"\n",
    "X = data.drop(['Close',\"Date\"], axis=1)\n",
    "y = data['Close']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f86cd7fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T17:53:40.954232Z",
     "iopub.status.busy": "2024-05-20T17:53:40.953526Z",
     "iopub.status.idle": "2024-05-20T17:53:40.958525Z",
     "shell.execute_reply": "2024-05-20T17:53:40.957562Z"
    },
    "papermill": {
     "duration": 0.013006,
     "end_time": "2024-05-20T17:53:40.960896",
     "exception": false,
     "start_time": "2024-05-20T17:53:40.947890",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of X is: (633, 5)\n",
      "Shape of y is: (633,)\n"
     ]
    }
   ],
   "source": [
    "print(f\"Shape of X is: {X.shape}\")\n",
    "print(f\"Shape of y is: {y.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "92c2240f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T17:53:40.972285Z",
     "iopub.status.busy": "2024-05-20T17:53:40.971519Z",
     "iopub.status.idle": "2024-05-20T17:53:40.979181Z",
     "shell.execute_reply": "2024-05-20T17:53:40.978374Z"
    },
    "papermill": {
     "duration": 0.015612,
     "end_time": "2024-05-20T17:53:40.981217",
     "exception": false,
     "start_time": "2024-05-20T17:53:40.965605",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,shuffle=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "62387643",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T17:53:40.992046Z",
     "iopub.status.busy": "2024-05-20T17:53:40.991677Z",
     "iopub.status.idle": "2024-05-20T17:53:40.997731Z",
     "shell.execute_reply": "2024-05-20T17:53:40.996603Z"
    },
    "papermill": {
     "duration": 0.014063,
     "end_time": "2024-05-20T17:53:41.000209",
     "exception": false,
     "start_time": "2024-05-20T17:53:40.986146",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of X_train is: (506, 5)\n",
      "Shape of y_train is: (506,)\n"
     ]
    }
   ],
   "source": [
    "print(f\"Shape of X_train is: {X_train.shape}\")\n",
    "print(f\"Shape of y_train is: {y_train.shape}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e3cfd394",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T17:53:41.011434Z",
     "iopub.status.busy": "2024-05-20T17:53:41.010827Z",
     "iopub.status.idle": "2024-05-20T17:53:41.039418Z",
     "shell.execute_reply": "2024-05-20T17:53:41.038415Z"
    },
    "papermill": {
     "duration": 0.036588,
     "end_time": "2024-05-20T17:53:41.041692",
     "exception": false,
     "start_time": "2024-05-20T17:53:41.005104",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model=LinearRegression()\n",
    "model.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "27c4edb2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T17:53:41.053918Z",
     "iopub.status.busy": "2024-05-20T17:53:41.053520Z",
     "iopub.status.idle": "2024-05-20T17:53:41.059941Z",
     "shell.execute_reply": "2024-05-20T17:53:41.058912Z"
    },
    "papermill": {
     "duration": 0.014833,
     "end_time": "2024-05-20T17:53:41.062162",
     "exception": false,
     "start_time": "2024-05-20T17:53:41.047329",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "predictions=model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1139cd02",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T17:53:41.073729Z",
     "iopub.status.busy": "2024-05-20T17:53:41.073361Z",
     "iopub.status.idle": "2024-05-20T17:53:41.080727Z",
     "shell.execute_reply": "2024-05-20T17:53:41.079781Z"
    },
    "papermill": {
     "duration": 0.015528,
     "end_time": "2024-05-20T17:53:41.082761",
     "exception": false,
     "start_time": "2024-05-20T17:53:41.067233",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.01600281943778653"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import mean_squared_error\n",
    "mean_squared_error(y_test,predictions)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 4956164,
     "sourceId": 8343860,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9.751713,
   "end_time": "2024-05-20T17:53:41.708099",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-20T17:53:31.956386",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
